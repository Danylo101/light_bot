from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

import asyncio

import keyboards.keyboard as kb
from handlers.check_router import check_router

router = Router()

user_ip = {}
notification = {}

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {html.bold(message.from_user.full_name)}!\n"
                         f"–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤–±—É–¥–∏–Ω–∫—Éüí° —É —Ü–µ–π –≤–∞–∂–∫–∏–π —á–∞—Å",
                         reply_markup=kb.start)

@router.message(F.text == "/help")
async def help_handlers(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏:\n\n"
                         "1Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Å–≤—ñ—Ç–ª–æ** - –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π IP, —ñ —è –ø–µ—Ä–µ–≤—ñ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—ñ–Ω–≥, HTTP —Ç–∞ TCP –ø–æ—Ä—Ç–∏.\n"
                         "2Ô∏è‚É£ **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–±–æ—Ç—É** - –í–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ —î —Å–≤—ñ—Ç–ª–æ –¥–æ–º–∞ –±—É–¥—É—á–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ.\n\n"
                         "üí° –î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –∞–±–æ —É—Ç–æ—á–Ω–µ–Ω—å, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —ñ–∑ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º–∏!")

@router.message(F.text == "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
async def settings(message: Message):
    await message.answer("–¢–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö!", reply_markup=kb.settings)

@router.callback_query(F.data == "change_ip")
async def change_ip(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—É–±–ª—ñ—á–Ω–∏–π IP",)

@router.message(lambda message: message.text.count('.') == 3 and message.text.replace('.', '').isdigit())
async def record_ip(message: Message):
    user_id = message.from_user.id
    ip = message.text
    user_ip[user_id] = ip
    await message.answer(f"–í–∏ –≤–≤–µ–ª–∏ {user_ip[user_id]}", reply_markup=kb.start)

@router.message(F.text == "–í—ñ–¥–∫–ª—é—á–∏—Ç–∏/–í–∫–ª—é—á–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def toggle_notification(message: Message):
    user_id = message.from_user.id
    if user_ip.get(user_id) is None:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π IP!", reply_markup=kb.add_ip)
        return

    if notification.get(user_id, False):
        notification[user_id] = False
        await message.answer("–Ø –≤–∞—Å –Ω–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏–º—É –ø—Ä–æ –≤–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞")
    else:
        notification[user_id] = True
        await message.answer("–¢—ñ–ª—å–∫–∏ –Ω–æ —Å–≤—ñ—Ç–ª–æ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ/–≤–≤—ñ–º–∫–Ω–µ–Ω–æ —è –≤–∞—Å —Å–ø–æ–≤—ñ—â—É")
        await check_light(message)

async def check_light(message: Message):
    if notification.get(message.from_user.id, False):
        previous_msg = ""
        while True:
            current_msg = await check_router(user_ip[message.from_user.id])
            if current_msg != previous_msg:
                await message.answer(text=current_msg)
                previous_msg = current_msg
            await asyncio.sleep(300)

@router.callback_query(F.data == "start_kb")
async def start_kb(callback: CallbackQuery):
    pass
