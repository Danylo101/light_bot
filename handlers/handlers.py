from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

import asyncio

import keyboards.keyboard as kb
from handlers.check_router import check_router
from handlers.ip import is_valid_ip

router = Router()

user_ip = {}
notification = {}
logg = {}
active_tasks = {}

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {html.bold(message.from_user.full_name)}!\n"
                         f"–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∏ —î —Å–≤—ñ—Ç–ª–æ –≤–±—É–¥–∏–Ω–∫—Éüí° —É —Ü–µ–π –≤–∞–∂–∫–∏–π —á–∞—Å",
                         reply_markup=kb.start)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—É–±–ª—ñ—á–Ω–∏–π IP –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞:"
                         "\n\n–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞—î—Ç–µ —è–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤—ñ–π IP –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /chek_ip", reply_markup=kb.add_ip)

@router.message(F.text == "/about")
async def about(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏:\n\n"
                         "1Ô∏è‚É£ **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Å–≤—ñ—Ç–ª–æ** - –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π IP, —ñ —è –ø–µ—Ä–µ–≤—ñ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—ñ–Ω–≥, HTTP —Ç–∞ TCP –ø–æ—Ä—Ç–∏.\n"
                         "2Ô∏è‚É£ **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–±–æ—Ç—É** - –í–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ —î —Å–≤—ñ—Ç–ª–æ –¥–æ–º–∞ –±—É–¥—É—á–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ.\n\n"
                         "üí° –î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –∞–±–æ —É—Ç–æ—á–Ω–µ–Ω—å, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —ñ–∑ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º–∏!\n\n")

@router.message(F.text == "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
async def settings(message: Message):
    await message.answer("–¢–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö‚öôÔ∏è", reply_markup=kb.settings)

@router.callback_query(F.data == "change_ip")
async def change_ip(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—É–±–ª—ñ—á–Ω—É IP –∞–¥—Ä–µ—Å—É",)

@router.message(lambda message: message.text.count('.') == 3 and message.text.replace('.', '').isdigit())
async def record_ip(message: Message):
    user_id = message.from_user.id
    ip = message.text
    if not await is_valid_ip(ip):
        await message.answer(f"‚ùå –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É IP-–∞–¥—Ä–µ—Å—É {ip}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—ó —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 192.168.1.1).")
        return

    user_ip[user_id] = ip
    await message.answer(f"‚úÖ IP-–∞–¥—Ä–µ—Å–∞ {user_ip[user_id]} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", reply_markup=kb.start)


@router.message(F.text == "–í—ñ–¥–∫–ª—é—á–∏—Ç–∏/–í–∫–ª—é—á–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def toggle_notification(message: Message):
    user_id = message.from_user.id
    if user_ip.get(user_id) is None:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π IP!", reply_markup=kb.add_ip)
        return

    if notification.get(user_id, False):
        notification[user_id] = False
        await message.answer("–Ø –≤–∞—Å –Ω–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏–º—É –ø—Ä–æ –≤–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞‚úâÔ∏è")
    else:
        notification[user_id] = True
        await message.answer("–¢—ñ–ª—å–∫–∏ –Ω–æ —Å–≤—ñ—Ç–ª–æ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ/–≤–≤—ñ–º–∫–Ω–µ–Ω–æ —è –≤–∞—Å —Å–ø–æ–≤—ñ—â—É‚úâÔ∏è")
        await check_light(message)

async def check_light(message: Message):
    user_id = message.from_user.id
    if user_id in active_tasks:
        return True

    active_tasks[user_id] = True
    try:
        previous_msg = ""
        while notification.get(user_id, False):
            current_msg = await check_router(user_ip[user_id], logg.get(user_id, False))
            if current_msg != previous_msg:
                await message.answer(text=current_msg)
                previous_msg = current_msg
            await asyncio.sleep(300)
    except asyncio.CancelledError:
        pass
    finally:
        active_tasks.pop(user_id, None)

@router.callback_query(F.data == "log")
async def log(callback: CallbackQuery):
    if logg.get(callback.from_user.id, False):
        logg[callback.from_user.id] = False
        await callback.message.answer("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–æ–≥—ñ–≤ –≤–∏–∫–ª—é—á–µ–Ω–∞‚úâÔ∏è")
    else:
        logg[callback.from_user.id] = True
        await callback.message.answer("–í—ñ–¥–ø—Ä–∞–∫–∞ –ª–æ–≥—ñ–≤ –≤–∫–ª—é—á–µ–Ω–∞‚úâÔ∏è")

@router.message(F.text == "/chek_ip" )
async def chek_ip(message: Message):
    await message.answer("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://api.ipify.org —Ç–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n–Ø–∫—â–æ —Ü–µ–π IP –Ω–µ –ø—Ä–∞—Ü—é—î —Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ web-—Å—Ç–æ—Ä—ñ–Ω–∫—É –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞\n(–ü–µ—Ä–µ–≤–∞–∂–Ω–æ —Ü–µ http://192.168.0.1 –∞–±–æ https://192.168.1.1) —ñ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π IP\n\n–Ø–∫—â–æ –±–æ—Ç –Ω–∞–¥–∞–ª—ñ –ø–∏—à–µ —â–æ —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î —Ç–æ –≤–∞—à —Ä–æ—É—Ç–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏")

@router.message(F.text == "/help")
async def help_handler(message: Message):
    await message.answer( """
–Ø–∫—â–æ –±–æ—Ç –ø–æ—Å—Ç—ñ–π–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —Å–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î, –æ—Å—å –∫—ñ–ª—å–∫–∞ –∫—Ä–æ–∫—ñ–≤, —è–∫—ñ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ–Ω–∞—Ç–∏:

1. **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤—ñ–π —Ä–æ—É—Ç–µ—Ä**:
   - –£–ø–µ–≤–Ω—ñ—Ç—å—Å—è, —â–æ –≤—ñ–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î.
   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≥–æ—Ä—è—Ç—å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –Ω–∞ —Ä–æ—É—Ç–µ—Ä—ñ.

2. **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É**:
   - –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Wi-Fi –∞–±–æ –∫–∞–±–µ–ª—é —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∑ —ñ–Ω—à–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.
   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫.

3. **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ IP-–∞–¥—Ä–µ—Å—É**:
   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É IP-–∞–¥—Ä–µ—Å—É —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞.
   - –Ø–∫—â–æ IP-–∞–¥—Ä–µ—Å–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∞, –º–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è ‚Äî —É—Ç–æ—á–Ω—ñ—Ç—å —ó—ó —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ä–æ—É—Ç–µ—Ä–∞.

4. **–£–≤—ñ–º–∫–Ω—ñ—Ç—å –ª–æ–≥—É–≤–∞–Ω–Ω—è**:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/log`, —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫.
   - –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–æ–≥–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.

5. **–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞**:
   - –Ø–∫—â–æ —Ä–æ—É—Ç–µ—Ä –ø—Ä–∞—Ü—é—î, –∞–ª–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑—ñ —Å–≤–æ—ó–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.

6. **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**:
   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/monitor_off`, —â–æ–± –≤–∏–º–∫–Ω—É—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥, –∞ –ø–æ—Ç—ñ–º `/monitor_on`, —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É.

–Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è, –Ω–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É –±–æ—Ç–∞.
        """)

@router.message()
async def msg(message: Message):
    await command_start_handler(message)
